package org.example.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.example.*;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import static org.example.Main.addSettlers;
import static org.example.Main.moveSettlers;

public class Frame extends JFrame {
    private JPanel panel1;
    private JButton stopBtn;
    private JButton startBtn;
    private JPanel canvasContainer;
    private Canvas canvas = new Canvas();
    private boolean isSimRunning = true;

    public Frame() {
        super("Symulacja");
        canvasContainer.setPreferredSize(new Dimension(400, 400));
        canvasContainer.setMinimumSize(new Dimension(400, 400));
        this.canvasContainer.add(canvas);

        setContentPane(panel1);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        pack();
        setVisible(true);
        startBtn.addActionListener(e -> isSimRunning = true);
        stopBtn.addActionListener(e -> isSimRunning = false);
    }

    private void runSimulation() {
        new Thread(() -> {
            List<Coordinates> occupiedSpace = new ArrayList<>();
            List<Settlement> settlementList = new ArrayList<>();
            List<Settler> settlerList = new ArrayList<>();
            List<FoodLocation> foodLocationList = new ArrayList<>();
            List<BuildingMaterialsLocation> buildingMaterialsLocationList = new ArrayList<>();

            MapCreation.CreateMap(buildingMaterialsLocationList, foodLocationList, settlementList, settlerList, occupiedSpace, 1, 50, 0, 1);
            canvas.setValues(settlementList, settlerList, buildingMaterialsLocationList, foodLocationList);
            while (true) {
                if (!isSimRunning) continue;

                // Input input = new Input();
                // input.askInitialValues();


                // MapCreation.CreateMap(buildingMaterialsLocationList, foodLocationList, settlementList, settlerList, occupiedSpace, input.numberSettlements, input.numberFood, input.numberBuildingMaterials, input.numberStartingSettlers);
                //movement

                /*
                System.out.println(occupiedSpace.size());
                System.out.println(settlementList.size());
                System.out.println(settlerList.size());

                 */

                int days = 0;
                int movesPerDay;
                while (days < 10) {//waruenk2
                    movesPerDay = 0;
                    while (movesPerDay < 40) {//warunek

                        moveSettlers(settlerList, foodLocationList, buildingMaterialsLocationList);
                        // System.out.println("lokalizacja  = " + settlerList.get(0).getPosition().getX() + " " + settlerList.get(0).getPosition().getY());
                        movesPerDay++;
                    }
                    for (Settlement settlement : settlementList) {
                        addSettlers(settlerList, settlement);
                    }
                    days++;
                    System.out.println("lokalizacja  = " + settlerList.get(0).getPosition().getX() + " " + settlerList.get(0).getPosition().getY());
                    System.out.println("nourishment = " + settlementList.get(0).ownedNourishment);
                    canvas.setValues(settlementList, settlerList, buildingMaterialsLocationList, foodLocationList);
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                }
            }
        }).start();
    }

    public static void main(String[] args) {
        new Frame().runSimulation();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        canvasContainer = new JPanel();
        canvasContainer.setLayout(new CardLayout(0, 0));
        panel1.add(canvasContainer, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        stopBtn = new JButton();
        stopBtn.setText("Stop simulation");
        panel1.add(stopBtn, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startBtn = new JButton();
        startBtn.setText("Start simulation");
        panel1.add(startBtn, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel1;
    }

}
